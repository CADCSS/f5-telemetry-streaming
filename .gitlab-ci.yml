image: node:8

stages:
    - build
    - publish


# just in case, unittests only (without coverage check)
test_node6:
    image: node:6
    stage: test
    tags:
        - docker-executor
    script:
        - npm run install-test
        - npm run test-only
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_artifacts
        paths:
            - test/artifacts
        when: on_failure
        expire_in: 3 days

# BIG-IP 14.1+, unittests only (without coverage check)
test_node8:
    stage: test
    tags:
        - docker-executor
    script:
        - npm run install-test
        - npm run test-only
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_artifacts
        paths:
            - test/artifacts
        when: on_failure
        expire_in: 3 days

# mostly for containers, unittests only (without coverage check)
test_node_latest:
    image: node:latest
    stage: test
    tags:
        - docker-executor
    script:
        - npm run install-test
        - npm run test-only
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_artifacts
        paths:
            - test/artifacts
        when: on_failure
        expire_in: 3 days

# run tests and check code coverage
coverage:
    stage: test
    script:
        # install jq
        - apt-get update
        - apt-get install -y jq
        # install node modules
        - npm run install-test
        # npm audit - install includes audit, but perform specific check and fail if needed
        - audit_report=$(npm audit --json)
        - echo $audit_report
        - actions=$(echo $audit_report | jq .actions | jq length)
        - if [ $actions -ne 0 ]; then echo 'ERROR! vulnerabilities exist'; exit 1; fi
        # unit tests
        - npm test
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_coverage
        paths:
            - coverage
    tags:
        - cm-official-docker-executor

build_package:
    image: f5devcentral/containthedocs:rpmbuild
    stage: build
    script:
        - echo 'CI BUILD'
          # build RPM
        - npm install --global npm@5.10.0
        - npm run build
    tags:
        - cm-official-docker-executor
    artifacts:
        name: f5-telemetry-$CI_BUILD_REF
        paths:
            - dist
        expire_in: 1 month

build_docs:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: build
    script:
        - node scripts/schema-build.js
        # - node scripts/schema-check.js
        - node scripts/schema-to-rst.js
        - make html
        - vale --glob='*.{md,rst}' .
        #  - make linkcheck
    tags:
        - docker-executor
    artifacts:
        name: docs
        paths:
            - docs/_build/html
        expire_in: 1 month

# for this job following variables should be defined:
# CICD_AUTH_OS_USERNAME - VIO user
# CICD_AUTH_OS_PASSWORD - VIO password
# CICD_AUTH_OS_PROJECT  - VIO project
# or
# CICD_AUTH_OS_TOKEN - VIO auth token
# CICD_AUTH_OS_PROJECT - VIO project
# Also, variable to *enable* device pipeline should exist
# REQ_DEVICE_PIPELINE - boolean


# Publish docs to clouddocs.f5.com
publish_docs_to_production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: production
        url: https://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
    only:
        # fill in desired release branch name to add deployment from a branch: currently *doc-publish*
        - docs-publish@automation-toolchain/f5-telemetry
    tags:
        - cm-official-docker-executor
    script:
        # Uncomment and set to create desired version format
        - aws s3 sync docs/_build/html s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
        # - aws s3 cp versions.json s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/versions.json
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest
