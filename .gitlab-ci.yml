image: node:8

stages:
    - lint
    - test
    - build
    - deploy
    - functional test
    - teardown
    - publish

lint:
    image: node:8
    stage: lint
    tags:
        - docker-executor
    script:
        - npm run install-test
        - npm run lint

# BIG-IP 13.x and BIG-IP 14.0, unittests only (without coverage check)
test_node4:
    image: node:4
    stage: test
    tags:
        - docker-executor
    script:
        - npm install --global npm@5.10.0
        - npm run install-test
        - npm install mocha@5.2.0
        - npm run test-only

# just in case, unittests only (without coverage check)
test_node6:
    image: node:6
    stage: test
    tags:
        - docker-executor
    script:
        - npm run install-test
        - npm run test-only

# BIG-IP 14.1+, unittests only (without coverage check)
test_node8:
    stage: test
    tags:
        - docker-executor
    script:
        - npm run install-test
        - npm run test-only

# mostly for containers, unittests only (without coverage check)
test_node_latest:
    image: node:latest
    stage: test
    tags:
        - docker-executor
    script:
        - npm run install-test
        - npm run test-only

# run tests and check code coverage
test_package:
    stage: test
    script:
        # install jq
        - apt-get update
        - apt-get install -y jq
        # install node modules
        - npm run install-test
        # npm audit - install includes audit, but perform specific check and fail if needed
        - audit_report=$(npm audit --json)
        - echo $audit_report
        - actions=$(echo $audit_report | jq .actions | jq length)
        - if [ $actions -ne 0 ]; then echo 'ERROR! vulnerabilities exist'; exit 1; fi
        # unit tests
        - npm test
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_coverage
        paths:
            - coverage
    tags:
        - cm-official-docker-executor

build_package:
    image: f5devcentral/containthedocs:rpmbuild
    stage: build
    script:
        - echo 'CI BUILD'
        # install packages: jq
        - apt-get update
        - apt-get install -y jq
        # install node modules
        - npm run install-production
        - bash ./scripts/build_rpm.sh
    tags:
        - cm-official-docker-executor
    artifacts:
        name: f5-telemetry-$CI_BUILD_REF
        paths:
            - dist
        expire_in: 1 month

build_docs:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: build
    script:
        - make html
        - vale --glob='*.{md,rst}' .
        #  - make linkcheck
    tags:
        - docker-executor
    artifacts:
        name: docs
        paths:
            - docs/_build/html
        expire_in: 1 month

# for this job following variables should be defined:
# CICD_AUTH_OS_USERNAME - VIO user
# CICD_AUTH_OS_PASSWORD - VIO password
# CICD_AUTH_OS_PROJECT  - VIO project
# or
# CICD_AUTH_OS_TOKEN - VIO auth token
# CICD_AUTH_OS_PROJECT - VIO project
# Also, variable to *enable* device pipeline should exist
# REQ_DEVICE_PIPELINE - boolean
deploy_env:
    image: ${CICD_CONTAINER_DEPLOY}
    stage: deploy
    tags:
        - cm-official-docker-executor
    variables:
        PROJECT_NAME: test_functional_harness
        PROJECT_DECLARATION: ${CI_PROJECT_DIR}/test/functional/deployment/declaration.yml
        PROJECT_DIR: /root/deploy-projects/test_functional_harness
        CUSTOM_DECLARATION: "yes"
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_bigip.test_functional_harness_info
        paths:
            - ${CI_PROJECT_DIR}/harness_facts_flat.json
        when: on_success
    only:
        variables:
            - $REQ_DEVICE_PIPELINE == "true"
    script:
        - cd /root/cicd-bigip-deploy && make configure &&
            make printvars &&
            make setup && ls -als ${PROJECT_DIR} &&
            cp ${PROJECT_DIR}/harness_facts_flat.json ${CI_PROJECT_DIR}/harness_facts_flat.json

test_functional:
    stage: functional test
    script:
        - export TEST_HARNESS_FILE=${CI_PROJECT_DIR}/harness_facts_flat.json
        # really only need dev dependencies
        - npm run install-test
        - ls ./dist -ls
        - npm run test-functional
    # troubleshooting functional test failures typically requires looking at logs, one of which is
    # the restnoded log that is captured by the functional tests.  This saves off the folder
    # containing that log as an artifact to speed up the troubleshooting process
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_functests_logs
        paths:
            - test/functional/logs
        when: always
    tags:
        - cm-official-docker-executor
    only:
        variables:
            # enable this job
            - $RUN_FUNCTIONAL_TESTS == "true"

teardown_env:
    image: ${CICD_CONTAINER_DEPLOY}
    stage: teardown
    tags:
        - cm-official-docker-executor
    variables:
        PROJECT_NAME: test_functional_harness
        PROJECT_DECLARATION: ${CI_PROJECT_DIR}/test/functional/deployment/declaration.yml
        PROJECT_DIR: /root/deploy-projects/test_functional_harness
        CUSTOM_DECLARATION: "yes"
    script:
        - cd /root/cicd-bigip-deploy && make configure && make teardown
    when: always
    only:
        variables:
            - $REQ_DEVICE_PIPELINE == "true"

# Publish to internal artifactory
# Note: Will publish when new tags are pushed and use the current build in dist directory
# with the assumption being the rpm has been updated. However even if it hasn't the upload
# will simply update the existing rpm version/release in artifactory
publish_rpm_to_artifactory:
    stage: publish
    only:
        - tags
    tags:
        - docker-executor
    script:
        # we do not want the new build (dist/new_build/*.rpm), we want the checked in build
        - RPM_FILE=$(ls dist/*.rpm)
        - RPM_NAME=$(basename $RPM_FILE)
        - URL=${ARTIFACTORY_BASE_URL}/f5-telemetry-streaming-rpm/${RPM_NAME}
        - echo ${URL}
        - >-
          UPLOAD_RESULT=$(curl -H "Authorization: Bearer ${ARTIFACTORY_TOKEN}" -X PUT --data-binary @${RPM_FILE} ${URL})
        - if [[ $? -eq 0 ]] && [[ "$UPLOAD_RESULT" == *created* ]]; then echo "Upload complete"; else echo "Upload failed"; exit 1; fi
        - echo $UPLOAD_RESULT

# Publish docs to internal pages - note: this job name MUST be 'pages'
pages:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: staging
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}
    tags:
        - cm-official-docker-executor
    script:
        - mkdir -p ./public
        - cp -R docs/_build/html/* ./public
    artifacts:
        paths:
            - public
    only:
        - /^docs-.*$/

# Publish docs to clouddocs.f5networks.net
publish_docs_to_staging:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment: 
        name: staging
        url: https://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/latest
    tags:
        - cm-official-docker-executor
    only:
        - develop@cloudsolutions/f5-telemetry
    script:
        - aws s3 sync docs/_build/html s3://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/latest
        # - aws s3 cp versions.json s3://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/versions.json
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest

# Publish docs to clouddocs.f5.com
publish_docs_to_production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: production
        url: https://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
    only:
        # fill in desired release branch name to add deployment from a branch: currently *master*
        - master@cloudsolutions/f5-telemetry
        - docs-publish@cloudsolutions/f5-telemetry
    tags:
        - cm-official-docker-executor
    script:
        # Uncomment and set to create desired version format
        - aws s3 sync docs/_build/html s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
        # - aws s3 cp versions.json s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/versions.json
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest
