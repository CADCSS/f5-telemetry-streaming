image: node:8

stages:
- build
- deploy
- test
- teardown
- review

build package:
  image: f5devcentral/containthedocs:rpmbuild
  stage: build
  script:
    - echo 'CI BUILD'
    # install packages first
    - npm install --production
    - bash ./scripts/build_rpm.sh
  tags:
    - cm-official-docker-executor
  artifacts:
    name: f5-telemetry-$CI_BUILD_REF
    paths:
        - dist
    expire_in: 1 month

build docs:
    image: quay.pdsea.f5net.com/doc-ops/containthedocs:710e05a8ed
    stage: build
    script:
        - make html
        - vale --glob='*.{md,rst}' .
      #  - make linkcheck
    tags:
        - docker-executor
    artifacts:
        paths:
            - docs/_build/html
        expire_in: 1 month

# for this job following variables should be defined:
# CICD_AUTH_OS_USERNAME - VIO user
# CICD_AUTH_OS_PASSWORD - VIO password
# CICD_AUTH_OS_PROJECT  - VIO project
# or
# CICD_AUTH_OS_TOKEN - VIO auth token
# CICD_AUTH_OS_PROJECT - VIO project
# also one more variable should be defined
# CICD_PIPELINE_TRIGGER_FOR_DEPLOY - CI/CD trigger ID
#
# job triggers CI/CD trigger to initiate separate pipelie for deployment
# this allows to parametrize pipeline to test packages agains different
# versions of BIG-IP
trigger_deploy_job:
    stage: deploy
    image: node:8
    tags:
    - docker-executor
    script:
    - curl -k -X POST -F token=$CICD_PIPELINE_TRIGGER_FOR_DEPLOY
      -F ref=$CI_COMMIT_REF_NAME
      -F "variables[REQ_DEVICE_PIPELINE]=true"
      -F "variables[REQ_PROJECT_NAME]=cicd_bigip_13.0.0"
      -F "variables[REQ_BIGIP_VERSION]=13.0.0"
      -F "variables[REQ_BIGIP_BUILD]=0.0.1650"
      https://gitswarm.f5net.com/api/v4/projects/5073/trigger/pipeline
    except:
        variables:
        - $CI_PIPELINE_SOURCE == "trigger"

deploy_bigip:
    stage: deploy
    tags:
    - cm-official-docker-executor
    image: quay.pdsea.f5net.com/petrov/cicd-bigip-deploy:v0.1
    variables:
        PROJECT_NAME: $REQ_PROJECT_NAME
        PROJECT_DIR: /root/deploy-projects/$REQ_PROJECT_NAME
        BIGIP_VERSION: $REQ_BIGIP_VERSION
        BIGIP_BUILD: $REQ_BIGIP_BUILD
        BIGIP_BRANCH: $REQ_BIGIP_BRANCH
    artifacts:
        name: bigip_$BIGIP_BRANCH.$BIGIP_VERSION.$BIGIP_BUILD_harness_info
        paths:
        - $CI_PROJECT_DIR/harness_facts_flat.json
        when: on_success
    only:
        variables:
        - $REQ_DEVICE_PIPELINE == "true"
    script:
    - cd /root/cicd-bigip-deploy && make configure &&
      make printvars && cat $PROJECT_DIR/project-vars &&
      make setup && ls -als $PROJECT_DIR &&
      cp $PROJECT_DIR/harness_facts_flat.json $CI_PROJECT_DIR/harness_facts_flat.json

test package:
    stage: test
    script:
        - npm install
        - npm run lint
        - npm run test
    tags:
        - cm-official-docker-executor

test functional:
    stage: test
    script:
        - export TEST_HARNESS_FILE=$CI_PROJECT_DIR/harness_facts_flat.json
        - npm install
        - ls ./dist -ls
        - npm run test-functional
    tags:
        - cm-official-docker-executor
    only:
        variables:
        - $REQ_DEVICE_PIPELINE == "true"

teardown_bigip:
    stage: teardown
    tags:
    - cm-official-docker-executor
    image: quay.pdsea.f5net.com/petrov/cicd-bigip-deploy:v0.1
    variables:
        PROJECT_NAME: $REQ_PROJECT_NAME
        PROJECT_DIR: /root/deploy-projects/$REQ_PROJECT_NAME
    script:
    - cd /root/cicd-bigip-deploy && make configure && make teardown
    when: always
    only:
        variables:
        - $REQ_DEVICE_PIPELINE == "true"


pages:
    image: quay.pdsea.f5net.com/doc-ops/containthedocs:710e05a8ed
    stage: review
    environment:
        name: staging
        url: https://${CI_PROJECT_NAMESPACE}.pages.gitswarm.f5net.com/${CI_PROJECT_NAME}
    tags:
        - cm-official-docker-executor
    dependencies:
        - build docs
    script:
        - mkdir -p ./public
        - cp -R docs/_build/html/* ./public
    artifacts:
        paths:
            - public
    only:
        - develop@cloudsolutions/f5-telemetry
        - docs-vanessa@cloudsolutions/f5-telemetry

Publish docs to staging:
  image: quay.pdsea.f5net.com/doc-ops/containthedocs:710e05a8ed
  stage: review
  environment: 
    name: staging
    url: https://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/latest
  tags:
    - cm-official-docker-executor
  only:
    - docs-staging@cloudsolutions/f5-telemetry
  dependencies:
    - build docs
  script:
    - aws s3 sync docs/_build/html s3://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/latest
    # - aws s3 cp versions.json s3://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/versions.json
    # create invalidation to clear cloudfront cache
    - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest

# Publish docs to clouddocs.f5.com
docs to production:
  image: quay.pdsea.f5net.com/doc-ops/containthedocs:710e05a8ed
  stage: review
  environment:
    name: production
    url: https://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
  only:
  # Currently will only deploy to clouddocs.f5.com on commits to doc-publish
  # fill in desired release branch name and uncomment to add deployment from a branch
  - docs-publish@cloudsolutions/f5-telemetry
  tags:
  - cm-official-docker-executor
  dependencies:
  - build docs
  script:
  # Uncomment and set to create desired version format
    - aws s3 sync docs/_build/html s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
    # - aws s3 cp versions.json s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/versions.json
    # create invalidation to clear cloudfront cache
    - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest
